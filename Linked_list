Data structure consist of nodes which includes the data and the link.
#First we create a class NODE.

class Node:
    def __init__(self,value):
        self.info=value
        self.link=None

#Now we wil create a class Single_Linked_List

class SingleLinkedList:
    def __init__(self):
        self.start=None
    def display_list(self):
        pass
    def count_nodes(self):
        pass
    def search(self,x):
        pass
    def insert_in_beginning(self,value):
        pass
    def insert_at_end(self,value):
        pass
    def create_list(self):
        pass
    def insert_after(self,value,x):
        pass
    def insert_before(seld,value,x):
        pass
    def insert_at_position(self,value,k):
        pass
    def delete_node(self,x):
        pass
    def delete_first_node(self):
        pass
    def delete_last_node(self):
        pass
    def reverse_list(self):
        pass
    def bubble_sort_exdata(self):
        pass
    def bubble_sort_exlinks(self):
        pass
    def has_cycle(self):
        pass
    def find_cycle(self):
        pass
    def remove_cycle(self):
        pass
    def insert_cycle(self):
        pass
    def merge2(self,list2):
        pass
    def _merge2(self,p1,p2):
        pass
        
        
###################################################################################################################

list=SingleLinkedList()
list.create_list()

while True:
    print("1.Display list")
    print("2.Count the number of nodes")
    print("3.Search for an element")
    print("4.Insert in an empty list/Insert in the beginning of the list")
    print("5.Insert the node at the end of the list")
    print("6.Insert a node after a specified node")
    print("7.Insert a node before a speified node")
    print("8.Insert a node at a given position")
    print("9.Delete first node")
    print("10.Delete last node")
    print("11.Delete any node")
    print("12.Reverse the list")
    print("13.Bubble sort by exchanging data")
    print("14.Bubble sort by exchanging list")
    print("15.Merge Sort")
    print("16.Insert Cycle")
    print("17.Detect Cycle")
    print("18.Remove Cycle")
    print("19.Quit")
    
    option=int(input("Enter your choice: "))
    
    if option==1:
        list.display_list()
    elif option==2:
         list.count_nodes()
    elif option==3:
         value=int(input("Enter the number to be search: "))
         list.search(value)
    elif option==4:
         value=int(input("Enter the element to be inserted: "))
         list.insert_in_beginning(value)
    elif option==5:
         value=int(input("Enter the element to be inserted: "))
         list.insert_at_end(value)
    elif option==6:
         value=int(input("Enter the element to be inserted: "))
         x=int(input("Enter the element after which to insert: "))
         list.insert_after(value,x)
    elif option==7:
         value=int(input("Enter the element to be inserted: "))
         x=int(input("Enter the element after which to insert: "))
         list.insert_before(value,x)
    elif option==8:
         value=int(input("Enter the element to be inserted: "))
         k=int(input("Enter the element after which to insert: "))         
         list.insert_at_position(value,k)
    elif option==9:
         list.delete_first_node()
    elif option==10:
         list.delete_last_node()
    elif option==11:
         value=int(input("Enter the element to be deleted: "))
         list.delete_node(value)
    elif option==12:
         list.reverse_list()
    elif option==13:
         list.bubble_sort_exdata()
    elif option==14:
         list.bubblr_sort_exlinks()
    elif option==15:
         list.merge_sort()
    elif option==16:
         data=int(input("Enter the element at which the cycle has to be inerted :"))
         list.insert_cycle(data)
    elif option==17:
         if list.has_cycle():
             print("List has a cycle:")
         else:
             print("List doesn't have a cycle")
    elif option==18:
         list.remove_cycle()
    elif option==19:
         break
    else:
         print("Wrong option")
    print()
          
















